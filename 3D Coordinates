include <iostream>
using namespace std;


class Coord3D { //represents 3D coordinates
    public:     //public means it is accessible outside of class
        double x;
        double y;
        double z;
};

void move(Coord3D *ppos, Coord3D *pvel, double dt);

// allocate memory and initialize
Coord3D* createCoord3D(double x, double y, double z);

// free memory
void deleteCoord3D(Coord3D *p);

int main() {
    double x, y, z;  //initialize double variables x,y,z
    cout << "Enter position: "; 
    cin >> x >> y >> z;     //user input
    Coord3D *ppos = createCoord3D(x,y,z); 
    /*
    Pointer variable *ppos just like *pvel is used to store 
    the memory address of a Coord3D object. Also the function
    of createCoord3D is dynamically making a coord3D object that 
    initializes it with values of x,y, and z. So the ppos pointer
    and pvel pointer both are assigned the memory address of their 
    own Coord3D object thanks to the new operator. Each having
    their own set of x, y and z values.
    */
    
    cout << "Enter velocity: ";
    cin >> x >> y >> z;
    Coord3D *pvel = createCoord3D(x,y,z);

    move(ppos, pvel, 10.0);
    //ppos is the pointer to a Coord3D object (current pos)
    //pvel is the pointer to a Coord3D object (velocity)
    //10.0 just represents the time increment

    cout << "Coordinates after 10 seconds: " 
         << ppos->x << " " << ppos->y << " " << ppos->z << endl;
    //the operator '->' is used to access the memberes of the object
    //through pointers. And since we used the function the current
    //position has indeed changed for the pointer ppos from its
    //Coord 3D object.

    deleteCoord3D(ppos); // release memory
    deleteCoord3D(pvel);
}

Coord3D* createCoord3D(double x, double y, double z){
    Coord3D *object = new Coord3D;  //dynamically allocate memory
    object->x = x;  //assign value to member x
    object->y = y;  //assign value to member y
    object->z = z;  //assign value to member z
    return object;
}

void deleteCoord3D(Coord3D *p){
    delete p;   //deletes the allocated Coord3D object
}

void move(Coord3D *ppos, Coord3D *pvel, double dt){
    //updates the position of a 3D coordinate
    //ppos represents current position
    //pvel represents velocity
    //dt represenst the time increment
    ppos->x = ppos->x + pvel->x * dt; //ppos->x accesses x from Coord3D
    ppos->y = ppos->y + pvel->y * dt; //ppos->y accesses y from Coord3D 
    ppos->z = ppos->z + pvel->z * dt; //ppos->z accesses z from Coord3D
}

/*
Expected output:

Enter position: 10 20 30
Enter velocity: 5.5 -1.4 7.77
Coordinates after 10 seconds: 65 6 107.7
*/
